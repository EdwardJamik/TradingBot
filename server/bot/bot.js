const {Telegraf} = require("telegraf");
require("dotenv").config();
const {BOT_TOKEN, WEB_APP,WEB_APP_PROFILE} = process.env
const User = require('../models/user.model')
const {message} = require("telegraf/filters");
const bot = new Telegraf(`${BOT_TOKEN}`)

const webAppUrl = `${WEB_APP}`;

bot.command('start', async (ctx) => {
    try {
        const chat_id = ctx?.chat?.id;
        const first_name = ctx?.chat?.first_name;
        const username = ctx?.chat?.username;

        const findUser = await User?.findOne({chat_id})

        if(findUser){
            if(findUser?.fullName && findUser?.phone){
                ctx.deleteMessage().catch((e) => console.log(e));
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});
                const {message_id} = await ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèº', {
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ö–∞–±–∏–Ω–µ—Ç üòé', web_app: {url: WEB_APP_PROFILE}},{text: '–û–±—É—á–µ–Ω–∏–µ üìö', web_app: {url: WEB_APP}}],
                            [{text: '–ö–æ–Ω–∫—É—Ä—Å—ã üèÜ', callback_data: 'concurs'},{text: '–ü–æ–º–æ—â—å‚ùì', callback_data: 'concurs'}]
                        ]
                    }
                });
                await User.updateOne({chat_id}, {message_id})
            } else if(findUser?.action !== 'testModale' && !findUser?.fullName && !findUser?.phone){
                ctx.deleteMessage().catch((e) => console.log(e));
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});
                const {message_id} = await ctx.replyWithHTML('<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞!</b>\n\n–í—ã —É–∑–Ω–∞–ª–∏ –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û</b>', {});
                await User.updateOne({chat_id}, {message_id})
            } else {
                ctx.deleteMessage().catch((e) => console.log(e));
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});
                const {message_id} = await ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–Ω–æ–ø–∫—É üëáüèº', {
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', web_app: {url: webAppUrl}}]
                        ]
                    }
                });
                await User.updateOne({chat_id}, {message_id})
            }
        } else{
            ctx.deleteMessage().catch((e) => console.log(e));
            const {message_id} = await ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–Ω–æ–ø–∫—É üëáüèº', {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', web_app: {url: webAppUrl}}]
                    ]
                }
            });
            await User.create({chat_id, first_name, username, message_id, action: 'testModale'})
        }


    } catch (e) {
        console.error(e)
    }
});

bot.on(message, async ctx => {
    try {
        const chat_id = ctx?.chat?.id;
        const user_message = ctx?.message?.text

        const findUser = await User?.findOne({chat_id})
        const regex = /^[\p{L}\p{M}]+(?:[\s][\p{L}\p{M}]+)*$/u;

        if(findUser?.action === 'reg_fullName'){
            if(regex.test(user_message)){
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});

                await User.updateOne({chat_id}, {fullName:user_message, action:'reg_phone'})
                const {message_id} = await ctx.replyWithHTML('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëáüèº', {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                                request_contact: true
                            }]
                        ],
                        one_time_keyboard: true,
                        resize_keyboard: true
                    }
                });
                await User.updateOne({chat_id}, {message_id})
            } else {
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});

                const {message_id} = await ctx.replyWithHTML('–í–≤–µ–¥–µ–Ω–æ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –§–ò–û, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û')
                await User.updateOne({chat_id}, {message_id})
            }

            ctx.deleteMessage().catch((e) => console.log(e));
        } else if(findUser?.action === 'reg_phone'){
            const phone = ctx?.update?.message?.contact?.phone_number
            if(phone){
                ctx.deleteMessage().catch((e) => console.log(e));
                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});
                await User.updateOne({chat_id}, {phone, action:''})
                const {message_id} = await ctx.replyWithHTML('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëáüèº', {
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ö–∞–±–∏–Ω–µ—Ç üòé', web_app: {url: WEB_APP_PROFILE}},{text: '–û–±—É—á–µ–Ω–∏–µ üìö', web_app: {url: WEB_APP}}],
                            [{text: '–ö–æ–Ω–∫—É—Ä—Å—ã üèÜ', callback_data: 'concurs'},{text: '–ü–æ–º–æ—â—å‚ùì', callback_data: 'concurs'}]
                        ]
                    }
                });
                await User.updateOne({chat_id}, {message_id})
            } else{
                ctx.deleteMessage().catch((e) => console.log(e));

                if(findUser?.message_id)
                    ctx.deleteMessage(findUser?.message_id).catch((e) => {});

                const {message_id} = await ctx.replyWithHTML('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëáüèº', {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                                request_contact: true
                            }]
                        ],
                        one_time_keyboard: true,
                        resize_keyboard: true
                    }
                });
                await User.updateOne({chat_id}, {message_id})
            }
        } else {
            ctx.deleteMessage().catch((e) => console.log(e));
        }


    } catch (e){
        console.error(e)
    }
})

module.exports.bot = bot